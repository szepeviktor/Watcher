#!/bin/bash
### BEGIN INIT INFO
# Provides:          watcher
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop Watcher that watches specified files/folders for changes
### END INIT INFO

#################################################################################
#
# https://gist.github.com/bcap/5397674
# https://github.com/fail2ban/fail2ban/blob/master/files/debian-initd
# https://github.com/getzze/Watcher/blob/master/watcher.init.d
# http://man.cx/start-stop-daemon
# http://refspecs.linuxbase.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html
#
#################################################################################

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Watches specified files/folders for changes"
NAME="watcher"
DAEMON="/usr/bin/watcher.py"
DAEMON_ARGS="-c /etc/watcher.ini"

PIDFILE="/var/run/${NAME}.pid"
SCRIPTNAME="/etc/init.d/$NAME"

START_STOP_DAEMON_OPTIONS=""

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start() {
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started
  start-stop-daemon $START_STOP_DAEMON_OPTIONS --start --quiet --pidfile $PIDFILE --exec $DAEMON --test || return 1
  start-stop-daemon $START_STOP_DAEMON_OPTIONS --start --quiet --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_ARGS start || return 2
}

#
# Function that stops the daemon/service
#
do_stop() {
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --pidfile $PIDFILE
  [ "$?" = 2 ] && return 2
  return "$RETVAL"
}

case "$1" in

  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2)   [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
  ;;

  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2)   [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
  ;;

  status)
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
  ;;

  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
          0) log_end_msg 0 ;;
          # Old process is still running
          1) log_end_msg 1 ;;
          # Failed to start
          *) log_end_msg 1 ;;
        esac
      ;;
      *)
        # Failed to stop
        log_end_msg 1
      ;;
    esac
  ;;

  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
  ;;

esac

exit 0
